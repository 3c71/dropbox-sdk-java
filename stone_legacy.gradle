
class StoneConfig {
    String packageName = 'com.dropbox.stone'
    String routeFilter = null
    boolean keepUnused = false
    List<ClientSpec> clients = []
}

class ClientSpec {
    String name = 'StoneClient'
    String javadoc = ''
    String routesClassNameFormat = ''
    String routeFilter = ''

    String getSpecString() {
        return "${name}:${javadoc}:${routesClassNameFormat}:${routeFilter}"
    }
}

project.sourceSets.all { SourceSet sourceSet ->
    def taskName = "main".equals(sourceSet.name) ? "generateStone" : "generate${sourceSet.name.capitalize()}Stone"
    task "${taskName}" {
        description "Generate Stone Java source files for ${sourceSet.name}."

        ext {
            config = new StoneConfig()
            generatorDir = 'generator'
            stoneDir = 'stone'
            specDir = project.properties.get('com.dropbox.api.specDir', "src/${sourceSet.name}/stone")
            outputDir = "${project.buildDir}/generated/source/stone/${sourceSet.name}"
        }

        def specFiles = fileTree(dir: specDir, include: '**/*.stone')

        inputs.dir { project.fileTree(dir: generatorDir, exclude: '**/*.pyc') }
        inputs.sourceDir { specFiles }
        inputs.property "config", { new groovy.json.JsonBuilder(config).toString() }
        outputs.dir { outputDir }

        doLast {
            def generatorFile = fileTree(dir: generatorDir, include: '**/*stoneg.py').getSingleFile()
            def srcOutputDir = new File(outputDir, "src")
            def logFile = new File(outputDir, "log/stone.log")

            srcOutputDir.mkdirs()
            logFile.parentFile.mkdirs()

            project.exec {
                standardOutput = new FileOutputStream(logFile)
                commandLine "python3", "-m", "stone.cli"

                environment PYTHONPATH: file(stoneDir).absolutePath
                args "--clean-build"
                if (config.routeFilter != null) {
                    args "--filter-by-route-attr", config.routeFilter
                }
                args generatorFile.absolutePath
                args new File(outputDir, "src").absolutePath
                args specFiles.getFiles()
                args "--"
                args "--package", config.packageName
                if (config.keepUnused) {
                    args "--keep-unused"
                }

                for (ClientSpec client : config.clients) {
                    args "--client-spec", client.specString
                }
            }
        }
    }

    sourceSet.java.srcDir project.tasks."${taskName}".outputDir
    Task compile = project.tasks.getByName(sourceSet.getCompileTaskName("java"))
    compile.dependsOn project.tasks."${taskName}"
}


generateStone {
    config = new StoneConfig(
        packageName: 'com.dropbox.core.v2',
        routeFilter: 'alpha_group=null and beta_group=null',

        clients: [
            new ClientSpec(
                name: 'DbxClientV2Base',
                javadoc: 'Base class for user auth clients.',
                routesClassNameFormat: "DbxUser%sRequests",
                routeFilter: 'auth="user" or auth="noauth"',
            ),
            new ClientSpec(
                name: 'DbxTeamClientV2Base',
                javadoc: 'Base class for team auth clients.',
                routesClassNameFormat: 'DbxTeam%sRequests',
                routeFilter: 'auth="team"',
            ),
            new ClientSpec(
                name: 'DbxAppClientV2Base',
                javadoc: 'Base class for app auth clients.',
                routesClassNameFormat: "DbxApp%sRequests",
                routeFilter: 'auth="app"',
            )
        ],
    )
}

generateTestStone {
    config = new StoneConfig(
        packageName: 'com.dropbox.core.stone',
        keepUnused: true,

        clients: [
            new ClientSpec(
                name: 'StoneTestClient',
            )
        ],
    )
}
