#! /usr/bin/env bash
set -euo pipefail

mvn_target_dir="target"

# Locate the script file.  Cross symlinks if necessary.
loc="$0"
while [ -h "$loc" ]; do
    ls=`ls -ld "$loc"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        loc="$link"  # Absolute link
    else
        loc="`dirname "$loc"`/$link"  # Relative link
    fi
done

base_dir=`dirname "$loc"`

babel_dir="$base_dir/babel"
spec_dir="${base_dir}/spec"
gen_dir="$base_dir/$mvn_target_dir/generated-sources/babel"
generator="$base_dir/generator/java.babelg.py"

usage() {
    echo "usage: $0 [SPEC_DIR [OUTPUT_DIR]]"
    echo ""
    echo "positional arguments:"
    echo "  SPEC_DIR     Top-level directory containing Babel spec files (default: ${spec_dir})."
    echo "  OUTPUT_DIR   Top-level directory to output generated source files (default: ${gen_dir})."
    echo ""
    echo "optional arguments:"
    echo "  -h/--help    Display this message and exit."
}

args=("${spec_dir}", "${gen_dir}")
argi=0
while [[ $# -gt 0 ]]; do
    case "$1" in
        "-h"|"--help")
            usage
            exit 1
            ;;
        *)
            echo "args[$argi]=$1"
            args[$argi]="${1}"
            argi=$(( $argi + 1 ))
            shift
    esac
done

if [[ ${#args[@]} -gt 2 ]]; then
    echo "$0: Too many arguments" 1>&2
    usage
    exit 1
fi

spec_dir="${args[0]}"
gen_dir="${args[1]}"

if [[ -e "$gen_dir" ]]; then
    rm -r "$gen_dir"
fi

mkdir -p "$gen_dir"

echo "Generating..."
PYTHONPATH="$babel_dir" python3 -m babelapi.cli \
    "$generator" \
    "$gen_dir"\
    $(find -H "${spec_dir}" -name "*.babel") \
     --\
     --package com.dropbox.core.v2
